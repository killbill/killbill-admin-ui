<%
=begin%>
 <%= form_for @role_definition, :html => {:class => 'form-horizontal'} do |f| %>
    <div class="form-group">
      <%= f.label :role, 'Role name', :class => 'col-sm-3 control-label' %>
      <div class="col-sm-9">
        <%= f.text_field :role, :class => 'form-control' %>
      </div>
    </div>
    <div class="form-group">
      <%= f.label :permissions, 'Permissions', :class => 'col-sm-3 control-label' %>
      <div class="col-sm-9">
        <%= f.text_field :permissions, :class => 'form-control' %>
        <p class="help-block">Comma separated, e.g. account:create,entitlement:change_plan,invoice:credit</p>
      </div>
    </div>
    <div class="form-group">
      <div class="col-sm-offset-3 col-sm-9">
        <%= submit_tag 'Save', :class => 'btn btn-default' %>
      </div>
    </div>
<% end %> 
<%
=end%>

<%= form_for @role_definition, html: { class: 'form-horizontal' } do |f| %>
  <div class="form-group d-flex pb-3">
    <%= f.label :role, 'Role name', class: 'col-sm-3 control-label' %>
    <div class="col-sm-9">
      <%= f.text_field :role, class: 'form-control' %>
    </div>
  </div>
<div class="form-group d-flex pb-3 premissions-group">
  <%= f.label :permissions, 'Permissions', class: 'col-sm-3 control-label' %>
  <div class="col-sm-9">
    <%= f.hidden_field :permissions, id: "permissions_hidden" %>

    <div id="chip-wrapper" class="form-control d-flex flex-wrap align-items-center p-2 chip-input-container" style="min-height: 2.625rem; border: 0.0625rem solid #ccc; border-radius: 0.25rem;">
      <input type="text" id="chip-input" style="border: none; outline: none; flex: 1;" />
    </div>

    <p class="help-block">
      Comma separated, e.g. account:create, entitlement:change_plan, invoice:credit
    </p>
  </div>
</div>


  <div class="form-group d-flex justify-content-end pt-3 border-top mb-3">
    <%= render "kaui/components/button/button", {
      label: 'Close',
      variant: "outline-secondary d-inline-flex align-items-center gap-1",
      type: "button",
      html_class: "kaui-button custom-hover mx-2",
      html_options: {
        id: "closeButton",
        onclick: "window.history.back();"
      }
    } %>

    <%= render "kaui/components/button/button", {
      label: 'Save User',
      variant: "outline-secondary d-inline-flex align-items-center gap-1",
      type: "submit",
      html_class: "kaui-dropdown custom-hover",
    } %>
  </div>
<% end %>

<%= javascript_tag do %>
  document.addEventListener('DOMContentLoaded', function () {
    const input = document.getElementById('chip-input');
    const wrapper = document.getElementById('chip-wrapper');
    const hidden = document.getElementById('permissions_hidden');
    let permissions = [];

    function renderChips() {
      // Remove all chips except the input box
      [...wrapper.querySelectorAll('.chip')].forEach(chip => chip.remove());

      permissions.forEach((perm) => {
        const chip = document.createElement('div');
        chip.className = 'chip badge bg-secondary text-white d-inline-flex align-items-center px-2 py-1 me-1 mb-1';
        chip.textContent = perm;

        const closeBtn = document.createElement('span');
        closeBtn.className = 'remove-chip ms-1 d-flex align-items-center';
        closeBtn.style.cursor = 'pointer';
        closeBtn.innerHTML = `
          <svg width="10" height="10" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8.50049 1.5L1.50049 8.50001M1.50049 1.5L8.50049 8.50001" stroke="#A4A7AE" stroke-width="1.25" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        `;
        closeBtn.onclick = () => {
          permissions = permissions.filter(p => p !== perm);
          renderChips();
          updateHiddenField();
        };

        chip.appendChild(closeBtn);
        wrapper.insertBefore(chip, input);
      });
    }

    function updateHiddenField() {
      hidden.value = permissions.join(',');
    }

    function addPermission(value) {
      const cleaned = value.trim().replace(/,$/, '');
      if (cleaned && !permissions.includes(cleaned)) {
        permissions.push(cleaned);
        renderChips();
        updateHiddenField();
      }
      input.value = '';
    }

    input.addEventListener('keydown', function (e) {
      if (e.key === 'Enter' || e.key === ',') {
        e.preventDefault();
        addPermission(input.value);
      }
    });

    input.addEventListener('blur', function () {
      if (input.value.trim() !== '') {
        addPermission(input.value);
      }
    });
  });
<% end %>