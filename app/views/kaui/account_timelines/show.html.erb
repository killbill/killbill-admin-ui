<div class="page-header">
  <h3>Account <%= @account.name %></h3>
  <%= link_to @account.email, Kaui.account_home_path.call(@account.external_key) %>
</div>
<form class="form-horizontal">
  <div class="control-group">
    <label for="bundles" class="control-label">Filter by bundle name</label>

    <div class="controls">
      <%= select_tag 'bundles', options_for_select([''] + @bundle_names.values.sort, @selected_bundle || 'all') %>
    </div>

    <label for="events" class="control-label">Filter by event type</label>

    <div class="controls">
      <%= select_tag 'event_types', options_for_select('<option value="all">ALL</option><option value="invoice">INVOICE</option><option value="payment">PAYMENT</option><option value="entitlement">ENTITLEMENTS</option>'.html_safe) %>
    </div>

    <dl class="dl-horizontal">
      <dt>Billing timezone:</dt>
      <dd><%= @account.time_zone %></dd>
    </dl>
  </div>
</form>
<hr/>
<table id="timeline-table" class="table table-condensed">
<thead>
<tr>
  <th>Requested Date</th>
  <th>Effective Date</th>
  <th>Bundle Name</th>
  <th>Event Type</th>
  <th>Details</th>
  <th>Reason Code / Comments</th>
  <th>Actions</th>
</tr>
</thead>
<tbody>
<% if @account.present? && @timeline.present? %>
    <% @timeline.invoices.each do |invoice_stub| %>
        <% if invoice_stub.bundle_keys.present? %>
            <% bundles = invoice_stub.bundle_keys.split(',').map { |bundle_key| @bundle_names[bundle_key] }.join(',') %>
        <% end %>
        <% if invoice_stub.invoice_id.present? && @invoices_by_id.has_key?(invoice_stub.invoice_id) %>
            <% invoice = @invoices_by_id[invoice_stub.invoice_id] %>
        <% else %>
            <% invoice = invoice_stub %>
        <% end %>
        <tr title="<%= bundles %>" data-event_type="INVOICE">
          <td>
            <% if invoice.invoice_date.present? %>
                <%= invoice.invoice_date %>
            <% else %>
                [unknown]
            <% end %>
          </td>
          <td>
            <% if invoice.target_date.present? %>
                <%= invoice.target_date %>
            <% else %>
                [unknown]
            <% end %>
          </td>
          <td>
            <% if invoice_stub.bundle_keys.present? %>
                <% invoice_stub.bundle_keys.split(',').each do |bundle_key| %>
                    <%= link_to @bundle_names[bundle_key], Kaui.bundle_home_path.call(bundle_key) %>
                    <br/>
                <% end %>
            <% end %>
          </td>
          <td><%= 'INVOICE' %></td>
          <td><span class="hide" title="<%= invoice.invoice_number %>"></span>
            <%= 'Amount:' %> <%= humanized_money_with_symbol invoice.amount_to_money %>
            (<%= @account.currency %>)<br/>
            <%= 'Balance:' %> <%= humanized_money_with_symbol invoice.balance_to_money %>
            (<%= @account.currency %>)<br/>
            <% if invoice.credit_adj.present? && invoice.credit_adj > 0 %>
                <%= 'Credit adjustment:' %> <%= humanized_money_with_symbol invoice.credit_adjustment_to_money %>
                (<%= @account.currency %>)<br/>
            <% end %>
            <% if invoice.credits.present? && invoice.credits > 0 %>
                <%= 'Credit balance adjustment:' %> <%= humanized_money_with_symbol invoice.credits_to_money %>
                (<%= @account.currency %>)<br/>
            <% end %>
            <% if invoice.refund_adj.present? && invoice.refund_adj < 0 %>
                <%= 'Refund adjustment:' %> <%= humanized_money_with_symbol invoice.refund_adjustment_to_money %>
                (<%= @account.currency %>)<br/>
            <% end %>
            <%= 'Invoice #' %>
            <%= link_to invoice.invoice_number, invoice_path(:id => invoice.invoice_id) %>
          </td>
          <td>
            <% if invoice_stub.audit_logs.present? %>
                <% invoice_stub.audit_logs.each do |entry| %>
                    <%= Kaui::AuditLog.description(entry) unless entry.changed_by == 'Transition' %>
                    <br/>
                <% end %>
            <% end %>
          </td>
          <td>
            <nobr>
              <%= link_to 'Payment',
                          kaui_engine.new_payment_path(:params => {:account_id => invoice.account_id,
                                                                   :invoice_id => invoice.invoice_id}),
                          :class => "btn btn-xs #{'disabled' unless invoice.balance > 0}" %>
            </nobr>
            <% if can? :credit, Kaui::Invoice %>
                <nobr>
                  <%= link_to 'Credit',
                              kaui_engine.new_credit_path(:params => {:account_id => invoice.account_id,
                                                                      :invoice_id => invoice.invoice_id}),
                              :class => 'btn btn-xs' %>
                </nobr>
            <% end %>
            <% if can? :charge, Kaui::Invoice %>
                <nobr>
                  <%= link_to 'Charge',
                              kaui_engine.new_charge_path(:params => {:account_id => invoice.account_id,
                                                                      :invoice_id => invoice.invoice_id}),
                              :class => 'btn btn-xs' %>
                </nobr>
            <% end %>
          </td>
        </tr>
    <% end %>
    <% @timeline.payments.each do |payment| %>
        <% if payment.target_invoice_id.present? %>
            <% bundles = @bundle_names_by_invoice_id[payment.target_invoice_id].to_a.join(',') %>
            <% invoice = @invoices_by_id[payment.target_invoice_id] %>
        <% else %>
            <% bundles = nil %>
            <% invoice = nil %>
        <% end %>
        <% payment.transactions.each do |transaction| %>
            <tr title="<%= bundles %>" data-event_type="PAYMENT">
              <td>
                <% if transaction.effective_date.present? %>
                    <%= format_date(transaction.effective_date, @account.time_zone).html_safe %>
                <% else %>
                    [unknown]
                <% end %>
              </td>
              <td>
                <% if transaction.effective_date.present? %>
                    <%= format_date(transaction.effective_date, @account.time_zone).html_safe %>
                <% else %>
                    [unknown]
                <% end %>
              </td>
              <td>
                <% (@bundle_keys_by_invoice_id[payment.target_invoice_id] || []).each do |bundle_key| %>
                    <%= link_to @bundle_names[bundle_key], Kaui.bundle_home_path.call(bundle_key) %>
                    <br/>
                <% end %>
              </td>
              <td><%= transaction.transaction_type %></td>
              <td>
                <span class="hide" title="<%= invoice.invoice_number unless invoice.nil? %>"></span>
                <%= 'Transaction id:' %> <%= truncate_uuid(transaction.transaction_id) %>
                <br/>
                <%= 'Amount:' %> <%= humanized_money_with_symbol Kaui::Transaction.amount_to_money(transaction) %>
                (<%= transaction.currency %>)<br/>
            <span
            <% if transaction.status == 'FAILED' %>class="alert-error"
            <% elsif transaction.status == 'SUCCESS' %>class="alert-success" <% end %>>
              <%= transaction.status %>
            </span>
                <br/>
                <%= 'Payment #' %> <%= link_to payment.payment_number, payment_path(:id => payment.payment_id) %>
                <% unless invoice.nil? %>
                    <br/><%= 'Invoice #' %> <%= link_to invoice.invoice_number, invoice_path(:id => invoice.invoice_id) %>
                <% end %>
              </td>
              <td>
                <% if transaction.audit_logs.present? %>
                    <% transaction.audit_logs.each do |entry| %>
                        <%= Kaui::AuditLog.description(entry) unless entry.changed_by == 'PaymentRequestProcessor' %>
                        <br/>
                    <% end %>
                <% end %>
              </td>
              <td>
                <% if invoice.present? and %w(CAPTURE PURCHASE).include?(transaction.transaction_type) %>
                    <% if can? :refund, Kaui::Payment %>
                        <nobr>
                          <%= link_to 'Refund', kaui_engine.new_refund_path(:params => {:payment_id => payment.payment_id,
                                                                                        :account_id => @account.account_id,
                                                                                        :invoice_id => payment.target_invoice_id}),
                                      :class => "btn btn-xs #{'disabled' unless payment.payment_id.present? and transaction.status == 'SUCCESS' }" %>
                        </nobr>
                    <% end %>
                    <% if can? :chargeback, Kaui::Payment %>
                        <nobr>
                          <%= link_to 'Chargeback', kaui_engine.new_chargeback_path(:params => {:payment_id => payment.payment_id,
                                                                                                :account_id => @account.account_id,
                                                                                                :invoice_id => payment.target_invoice_id}),
                                      :class => "btn btn-xs #{'disabled' unless payment.payment_id.present? and transaction.status == 'SUCCESS'}" %>
                        </nobr>
                    <% end %>
                <% elsif !invoice.present? %>
                    <% if transaction.transaction_type == 'AUTHORIZE' %>
                        <% %w(CAPTURE VOID).each do |transaction_type| %>
                            <nobr>
                              <%= link_to transaction_type.downcase.capitalize, kaui_engine.new_transaction_path(:account_id        => payment.account_id,
                                                                                                                 :payment_id        => transaction.payment_id,
                                                                                                                 :payment_method_id => payment.payment_method_id,
                                                                                                                 :amount            => transaction.amount,
                                                                                                                 :currency          => transaction.currency,
                                                                                                                 :transaction_type  => transaction_type), :class => 'btn btn-xs' %>
                            </nobr>
                        <% end %>
                    <% elsif %w(CAPTURE PURCHASE).include?(transaction.transaction_type) %>
                        <% %w(REFUND CHARGEBACK).each do |transaction_type| %>
                            <nobr>
                              <%= link_to transaction_type.downcase.capitalize, kaui_engine.new_transaction_path(:account_id        => payment.account_id,
                                                                                                                 :payment_id        => transaction.payment_id,
                                                                                                                 :payment_method_id => payment.payment_method_id,
                                                                                                                 :amount            => transaction.amount,
                                                                                                                 :currency          => transaction.currency,
                                                                                                                 :transaction_type  => transaction_type), :class => 'btn btn-xs' %>
                            </nobr>
                        <% end %>
                    <% end %>
                <% end %>
              </td>
            </tr>
        <% end %>
    <% end %>
    <% @timeline.bundles.each do |bundle| %>
        <% bundle.subscriptions.each do |sub| %>
            <% sub.events.each do |event| %>
                <!-- SKIP SERVICE_STATE_CHANGE  -->
                <% next if event.event_type == 'SERVICE_STATE_CHANGE' %>
                <tr title="<%= @bundle_names[bundle.external_key] %>" data-event_type="<%= event.event_type %>">
                  <td>
                    <% if event.requested_date.present? %>
                        <%= format_date(event.requested_date, @account.time_zone).html_safe %>
                    <% else %>
                        [unknown]
                    <% end %>
                  </td>
                  <td>
                    <% if event.effective_date.present? %>
                        <%= format_date(event.effective_date, @account.time_zone).html_safe %>
                    <% else %>
                        [unknown]
                    <% end %>
                  </td>
                  <td>
                    <%= link_to @bundle_names[bundle.external_key], Kaui.bundle_home_path.call(bundle.external_key) %>
                    <br/>
                  </td>
                  <td><%= event.event_type %></td>
                  <td>
                    <span class="hide" title="<%= sub.product_category %>"></span><%= event.product %> <%= event.billing_period == 'NO_BILLING_PERIOD' || event.billing_period.nil? ? '' : event.billing_period.downcase.capitalize %> <%= event.phase.downcase.capitalize if event.phase.present? %>
                  </td>
                  <td>
                    <% if event.audit_logs.present? %>
                        <% event.audit_logs.each do |entry| %>
                            <%= Kaui::AuditLog.description(entry) %>
                            <br/>
                        <% end %>
                    <% end %>
                  </td>
                  <td></td>
                </tr>
            <% end %>
        <% end %>
    <% end %>
<% end %>
</tbody>
</table>
<div class="form-actions">
  <%= link_to 'Back', :back, :class => 'btn' %>
</div>
<%= javascript_tag do %>
    function disableLinks() {
    $('a.btn.disabled').click(function (e) {
    e.preventDefault();
    });
    }

    eventsOrder = ["START_ENTITLEMENT", "START_BILLING", "PAUSE_ENTITLEMENT", "PAUSE_BILLING", "RESUME_ENTITLEMENT",
    "RESUME_BILLING", "PHASE", "CHANGE", "STOP_ENTITLEMENT", "STOP_BILLING", "INVOICE", "PAYMENT"];

    jQuery.fn.dataTableExt.oSort['timeline-event-asc'] = function(e1,e2) {
    var x = eventsOrder.indexOf(e1);
    var y = eventsOrder.indexOf(e2);
    return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    };

    jQuery.fn.dataTableExt.oSort['timeline-event-desc'] = function(e1,e2) {
    var x = eventsOrder.indexOf(e1);
    var y = eventsOrder.indexOf(e2);
    return ((x < y) ? 1 : ((x > y) ? -1 : 0));
    };

    function extractTitleAttributeFromText(txt) {
    // Ugly - better way of doing this?
    var matches = txt.match(/title="\w+"/g);
    if (matches == null || matches.size == 0) {
    return null;
    }
    return matches[0].split('=')[1];
    }

    jQuery.fn.dataTableExt.oSort['timeline-details-asc'] = function(e1,e2) {
    var x = extractTitleAttributeFromText(e1);
    var y = extractTitleAttributeFromText(e2);
    return ((x < y) ? -1 : ((x > y) ? 1 : 0));
    };

    jQuery.fn.dataTableExt.oSort['timeline-details-desc'] = function(e1,e2) {
    var x = extractTitleAttributeFromText(e1);
    var y = extractTitleAttributeFromText(e2);
    return ((x < y) ? 1 : ((x > y) ? -1 : 0));
    };

    function initTable() {
    return $("#timeline-table").dataTable({
    "sDom": "<'row'<'col-md-6'l><'col-md-6'f>r>t<'row'<'col-md-6'i><'col-md-6'p>>",
    "sPaginationType": "bootstrap",
    "oLanguage": {
    "sLengthMenu": "_MENU_ records per page"
    },
    "iDisplayLength": 100,
    "bRetrieve": true,
    // Force a predictive order for event types, invoices and payments
    "aaSorting": [[1, 'desc'], [4, 'asc'], [3, 'desc']],
    "aoColumns": [
    { "sType": 'date' },
    { "sType": 'date' },
    null,
    { "sType": 'timeline-event' },
    { "sType": 'timeline-details' },
    null,
    null
    ]
    });
    }

    function filterEachNode(rows) {
    var bundle = $("#bundles").val();
    var event_to_filter = $('#event_types').val().toUpperCase();

    for (i = 0; i < rows.length; i++)
    {
    tr = $(rows[i]);

    //filter bundles
    if (bundle == "" || tr.attr("title").split(",").indexOf(bundle) >= 0) {
    //first level filtering, so can remove hide
    tr.removeClass("hide");
    }
    else {
    //remove tr's not under this filter mode
    tr.addClass("hide");
    }

    //filter events
    if ("ALL" != event_to_filter)
    filterEvents(tr, event_to_filter);

    //add more filters here
    //do not unhide any rows
    }

    }

    function filterEvents(tr, event_to_filter) {
    tr_event_type = tr.data().event_type;

    core_events = ["INVOICE", "PAYMENT"]; //events which are not entitlements

    //is tr event not an event in question
    tr_event_does_not_match_filter = ("ENTITLEMENT" != event_to_filter &&
    tr_event_type != event_to_filter);

    //tr event is not an entitlement
    tr_event_is_not_entitlement = ("ENTITLEMENT" == event_to_filter &&
    core_events.indexOf(tr_event_type) >= 0);

    if ( tr_event_does_not_match_filter || tr_event_is_not_entitlement )
    {
    //add hide to all who dont deserve the filter
    tr.addClass("hide");
    }
    }

    function filterTable()
    {
    var dataTable = initTable();
    var all_nodes = dataTable.fnGetNodes();

    filterEachNode(all_nodes);

    //my rows are filtered, draw table
    dataTable.fnDraw();
    }


    $(document).ready(function() {
    disableLinks();
    // When going through the pages of the table, disable links as needed
    $('#timeline-table').bind('draw', function (e) {
    disableLinks();
    });

    initTable();

    $("#bundles, #event_types").change(filterTable);
    filterTable();
    });
<% end %>
