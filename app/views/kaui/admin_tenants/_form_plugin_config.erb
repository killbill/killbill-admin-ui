<% if can? :config_upload, Kaui::AdminTenant %>
    <div class="tab-pane fade" id="PluginConfig">


      <%= form_tag({:action => :upload_plugin_config}, :method => 'post', :multipart => true, :class => 'form-horizontal') do %>
          <%= hidden_field_tag(:id, @tenant.id) %>
          <%= hidden_field_tag(:plugin_name) %>
          <%= hidden_field_tag(:plugin_key) %>
          <%= hidden_field_tag(:plugin_type) %>

          <input type="hidden" id="plugin_repository" value="<%= plugin_repository.to_json %>" >

          <div id="plugin" class="form-group d-flex py-3">
            <%= label_tag :entered_plugin_name, 'Plugin name', :class => 'col-sm-2 control-label' %>

            <div class="col-sm-8">
              <select class="form-control" id="select_plugin_name"></select>
              <%= text_field_tag :entered_plugin_name, nil, :placeholder => 'as defined in the plugin Activator file',  :class => 'form-control', :tenant_plugin_config => @tenant_plugin_config.to_json %>
              <div class="text plugin-suggestion text-danger"></div>
            </div>
            <div class="col-sm-2">
              <label class="checkbox d-flex align-items-center justify-content-end">
                <input id="toggle_input" type="checkbox">
                <span class="slider round mx-2"> Manual Entry</span>
              </label>
            </div>
          </div>

          <div id="plugin_config_properties_header" class="form-group">
            <label class="col-sm-2 control-label" for="plugin_name">Plugin Properties</label>
            <label class="control-label switch-half-container" title="toggle raw">
              <label class="switch-half">
                <input id="toggle_raw" type="checkbox">
                <span class="slider round"></span>
              </label>
            </label>
          </div>
          <div class="form-group d-flex pb-3 border-bottom mb-3">
            <%= label_tag :configuration, 'Configuration', :class => 'col-sm-2 control-label', style: "margin-top: -5rem;" %>
            <div class="col-sm-10">
              <textarea name="plugin_properties[raw_config]" id="raw_config" rows="20" class="form-control" style="height: 6.25rem;"></textarea>
            </div>
          </div>

          <div class="d-flex justify-content-end">
            <%= render "kaui/components/button/button", {
              label: 'Upload',
              variant: "outline-secondary d-inline-flex align-items-center gap-1",
              type: "submit",
              html_class: "kaui-dropdown custom-hover m-0"
            } %>
          </div>
      <% end %>
    </div>
<% end %>

<script id="plugin_name_options_template" type="text/template">
  <option></option>
  {{#plugin_repository}}
    {{#start_installed}}<optgroup label="Installed">{{/start_installed}}
    {{#end_installed}}</optgroup>>{{/end_installed}}
    <option value="{{plugin_name}}" data-plugin-type="{{plugin_type}}" >
      {{display_name}}
    </option>
  {{/plugin_repository}}
</script>

<%= javascript_tag do %>
    $(document).ready(function() {
        $(".spinner").hide();
        $('#plugin_config_properties_header').hide();

        $('#entered_plugin_name').toggle();
        $('#toggle_input').on('change', function() {
            $('#select_plugin_name').toggle();
            $('#entered_plugin_name').toggle();
            $('.toggle-label').toggleClass('text-muted');
            $("#plugin_name").val('');
            $("#plugin_key").val('');
            $("#plugin_type").val('');
            $('#entered_plugin_name').val('');
            $('#select_plugin_name').val('');
            $('#plugin_config_properties').attr('plugin_name', '');
            $('#plugin_config_properties').empty();
            $('#plugin_config_properties_header').hide();
            $(".plugin-suggestion").html('');
            $("#raw_config").val('');
        });

        /* Intercept TAB and potentially display known properties */
        $('#entered_plugin_name').keydown(function (e) {
            if (e.keyCode === 9) {
                $("#plugin_name").val($('#entered_plugin_name').val());
                $("#plugin_key").val('');
                render_plugin_key_values();
            }
        });
        /* Intercept mouseleave and potentially display known properties */
        $('#entered_plugin_name').on('mouseleave', function() {
            $("#plugin_name").val($('#entered_plugin_name').val());
            $("#plugin_key").val('');
            render_plugin_key_values();
        });

        $("#toggle_raw").on('change', function(e) {
            $("#plugin_name").val($('#entered_plugin_name').val());
            $("#plugin_key").val('');
            render_plugin_key_values();
        });

        $('#select_plugin_name').on('change', function(e) {
            // User has selected a plugin from the dropdown
            var selectedOption = e.target.selectedOptions;

            if (selectedOption.length > 0) {
                var plugin_name = selectedOption[0].value;
                var plugin_key = selectedOption[0].text;

                $("#plugin_name").val(plugin_name);
                $("#plugin_key").val(plugin_key);
                $("#plugin_type").val(selectedOption[0].dataset['pluginType']); // java or ruby
                $('#plugin_config_properties').attr('plugin_name', '');
                $('#plugin_config_properties_header').hide();
                $("#toggle_raw").prop('checked', false);

                render_plugin_key_values();
            }
        });

        populate_plugin_name_options();
        function populate_plugin_name_options(){
            var all_plugins = JSON.parse($("#plugin_repository").val());
            // We only list installed plugins as to not confuse the user
            var plugin_repository = all_plugins.filter(plugin => plugin.installed);
            for (var idx = 0, size = plugin_repository.length; idx < size; idx++) {
                if (idx == 0 && plugin_repository[idx].installed) {
                    plugin_repository[idx]['start_installed'] = true;
                }

                if (idx > 0 && !plugin_repository[idx].installed && plugin_repository[idx - 1].installed) {
                    plugin_repository[idx]['end_installed'] = true;
                    break;
                }
            }

            for (var idx = 0, size = plugin_repository.length; idx < size; idx++) {
                if (plugin_repository[idx]['plugin_key']) {
                  plugin_repository[idx]['display_name'] = plugin_repository[idx]['plugin_key'];
                } else {
                  plugin_repository[idx]['display_name'] = plugin_repository[idx]['plugin_name'];
                }
            }

            var template = $("#plugin_name_options_template").html();
            var options_html = Mustache.render( template , { plugin_repository: plugin_repository });
            $("#select_plugin_name").html(options_html);
        }

        function get_existing_tenant_plugin_properties(entered_plugin_name) {
            var tenant_plugin_properties = $('#entered_plugin_name').attr('tenant_plugin_config');
            var res = JSON.parse(tenant_plugin_properties);
            return res[entered_plugin_name];
        }

        function get_tenant_plugin_properties(plugin_key, plugin_name) {
            /* Retrieve existing plugin properties for this tenant */
            var existing_props = get_existing_tenant_plugin_properties(plugin_key);

            // Try by plugin name for proprietary plugins
            if (isBlank(existing_props) && !isBlank(plugin_name)) {
                existing_props = get_existing_tenant_plugin_properties(plugin_name);
                if (isBlank(existing_props)) {
                    // For proprietary plugins, the killbill- prefix likely doesn't exist (see Kaui::PluginHelper discussion)
                    plugin_name = plugin_name.replace('killbill-', '');
                    existing_props = get_existing_tenant_plugin_properties(plugin_name);
                    if (isBlank(existing_props)) {
                        // For proprietary plugins, our docs suggest acme:foo as the format for the plugin key, and often the plugin name becomes acme-foo
                        plugin_name = plugin_name.replace(':', '-');
                        existing_props = get_existing_tenant_plugin_properties(plugin_name);
                    }
                }
            }

            return existing_props;
        }

        function render_plugin_key_values() {
            var plugin_name = "";
            var plugin_key         = "";
            if (isBlank($('#entered_plugin_name').val())) {
                plugin_name = $("#plugin_name").val();
                plugin_key = $("#plugin_key").val();
            } else {
                plugin_name = $("#entered_plugin_name").val();
            }

            var existing_props = get_tenant_plugin_properties(plugin_key, plugin_name);
            $("#raw_config").val(existing_props);
        }
});
<% end %>
