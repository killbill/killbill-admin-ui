<table id="subscriptions_<%= bundle.bundle_id %>" class="subscriptions-table">
  <thead>
  <tr>
    <% unless @available_subscription_tags.blank? && @custom_fields_per_subscription.blank? %>
      <th></th>
    <% end %>
    <th>Name</th>
    <th>Category</th>
    <th>Phase type</th>
    <th>Start date</th>
    <th>Cancel information</th>
    <th>Charged Date</th>
    <th></th>
  </tr>
  </thead>
  <tbody>
    <% (bundle.subscriptions || []).each do |sub| %>
      <% dropdown_id = "cancelDropdown-#{sub.subscription_id}" %>
      <tr class="<%= subscription_cancelled?(sub) ? 'expired' : 'non-expired' %>">
        <% unless @available_subscription_tags.blank? && @custom_fields_per_subscription.blank? %>
          <td class="inline-row-tag-bar">
            <div class="tag-bar tag-bar-no-border">
              <% unless @available_subscription_tags.blank? %>
                <div class="tag-select" onclick="void(0)">
                  <span><i class="fa fa-tag"></i><i class="fa fa-caret-down"></i></span>

                  <div class="tag-select-box">
                    <strong>Tag as:</strong>

                    <%= render :partial => 'kaui/bundle_tags/form_bar',
                               :locals => {:params => { :bundle_id => bundle.bundle_id},
                                 :tag_names => (@tags_per_subscription[sub.subscription_id] || []).map { |tag| tag.tag_definition_name },
                                 :available_tags => @available_subscription_tags,
                                 :update_tags_path => update_subscriptions_tags_path(sub.subscription_id)
                               } %>
                  </div>
                </div>
              <% end %>

              <%= render :partial => 'kaui/custom_fields/list_bar',
                         :locals => {:custom_fields => @custom_fields_per_subscription[sub.subscription_id] || []} %>
            </div>

          </td>
        <% end %>
        <td><%= humanized_subscription_plan_or_product_name(sub, catalog) %></td>
        <td>
          <span id="<%= sub.subscription_id %>-popover" class="object-id-popover category-bedge" title="Subscription ID" data-id="<%= sub.subscription_id %>">
            <%= humanized_subscription_product_category(sub) %>
          </span>
        </td>
        <td><span class="phase-type"><%= humanized_subscription_phase_type(sub).downcase %></span></td>
        <td><%= humanized_subscription_start_date(sub, account) %></td>
        <td><%= humanized_subscription_cancelled_information(sub, account) %></td>
        <td><%= humanized_subscription_charged_through_date(sub, account) %></td>
        <td class="text-center">
          <% if subscription_future_cancelled?(sub, account) %>
            <%= link_to 'Reinstate', kaui_engine.reinstate_path(:id => sub.subscription_id), :method => :put, :class => 'btn btn-xs' %>
          <% elsif !subscription_cancelled?(sub) %>
            <div class="d-flex justify-content-center align-items-center">
              <% if can? :cancel, Kaui::Subscription %>
                <div class="btn-group cancel-menu position-relative" id="<%= dropdown_id %>Wrapper">
                  <button id="<%= dropdown_id %>Btn" class="cancel-button">
                    Cancel
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M4 6.00003L8.00002 10L12 6" stroke="#D92D20" stroke-width="1.5" stroke-miterlimit="16" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                  </button>

                  <ul class="dropdown-menu"
                      id="<%= dropdown_id %>Menu"
                      style="display: none;">
                    <li><%= link_to 'Cancel (default policy)', kaui_engine.subscription_path(id: sub.subscription_id), method: :delete %></li>
                    <li><%= link_to 'Cancel start of term (full credit)', kaui_engine.subscription_path(id: sub.subscription_id, policy: 'START_OF_TERM'), method: :delete %></li>
                    <li><%= link_to 'Cancel immediately (partial credit)', kaui_engine.subscription_path(id: sub.subscription_id, policy: 'IMMEDIATE'), method: :delete %></li>
                    <li><%= link_to 'Cancel end of term (no credit)', kaui_engine.subscription_path(id: sub.subscription_id, policy: 'END_OF_TERM'), method: :delete %></li>
                    <li><%= link_to 'Cancel a subscription given a date', '#cancel_subscription_by_date_modal', data: { bs_toggle: 'modal', id: sub.subscription_id } %></li>
                  </ul>
                </div>
              <% end %>

              <% if can?(:create, Kaui::Subscription) || can?(:pause_resume, Kaui::Subscription) || can?(:change_plan, Kaui::Subscription) %>
                <% menu_items = [] %>

                <% if can?(:change_plan, Kaui::Subscription) %>
                  <% menu_items << {
                    label: "Change Plan",
                    path: kaui_engine.edit_subscription_path(sub.subscription_id),
                    icon: "kaui/subscription/change.svg"
                  } %>
                <% end %>

                <% if can?(:create, Kaui::Subscription) && @subscription[bundle.bundle_id].present? %>
                  <% menu_items << {
                    label: @subscription[bundle.bundle_id].product_category == 'BASE' ? 'Add add-on' : 'Add standalone subscription',
                    path: kaui_engine.new_subscription_path(
                      params: {
                        account_id: bundle.account_id,
                        bundle_id: bundle.bundle_id,
                        base_product_name: @subscription[bundle.bundle_id].product_name,
                        product_category: @subscription[bundle.bundle_id].product_category == 'BASE' ? 'ADD_ON' : 'STANDALONE'
                      }
                    ),
                    icon: "kaui/subscription/add-on.svg"
                  } %>
                <% end %>

                <% if can?(:pause_resume, Kaui::Subscription) %>
                  <% menu_items << {
                    label: "Pause / resume",
                    path: kaui_engine.pause_resume_bundle_path(account_id: bundle.account_id, id: bundle.bundle_id),
                    icon: "kaui/subscription/pause.svg"
                  } %>
                <% end %>

                <% if can?(:create, Kaui::Subscription) %>
                  <% menu_items << {
                    label: "Update BCD",
                    path: kaui_engine.edit_bcd_path(id: sub.subscription_id),
                    icon: "kaui/subscription/date.svg"
                  } %>
                <% end %>

                <%= render partial: "kaui/components/menu_dropdown/menu_dropdown", locals: {
                    variant: "btn-light",
                    label: "",
                    icon: "kaui/dots.svg",
                    html_class: "dots-menu",
                    menu_items: menu_items
                } %>
              <% end %>
            </div>
          <% end %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

<%= render :partial => 'kaui/subscriptions/cancel_by_date_modal' %>

<%= javascript_tag do %>
  $(document).ready(function() {
    $('.subscription-id-popover').popover();

    $('#subscriptions_<%= bundle.bundle_id %>').dataTable({
      "dom": "t",
      "paging": false,
      "order": [[ <%= @available_subscription_tags.blank? && @custom_fields_per_subscription.blank? ? 3 : 4 %>, "asc" ]],
      "columns": [
        <%= "{ orderable: false }," unless @available_subscription_tags.blank? && @custom_fields_per_subscription.blank? %>
        null,
        null,
        null,
        null,
        null,
        null,
        { "orderable": false }
      ]
    });

    $(".price-override-popover").popover({
      container: 'body',
      trigger: 'hover'
    });

    document.querySelectorAll('.cancel-button').forEach(function(button) {
      const idPrefix = button.id.replace('Btn', '');
      const menu = document.getElementById(idPrefix + 'Menu');
      const wrapper = document.getElementById(idPrefix + 'Wrapper');

      button.addEventListener('click', function (e) {
        e.stopPropagation();

        // Close all open dropdowns first
        document.querySelectorAll('.dropdown-menu').forEach(m => m.style.display = 'none');

        // Toggle this one
        const isOpen = menu.style.display === 'block';
        menu.style.display = isOpen ? 'none' : 'block';
      });

      // Close dropdown on outside click
      document.addEventListener('click', function (e) {
        if (!wrapper.contains(e.target)) {
          menu.style.display = 'none';
        }
      });
    });
  });
<% end %>
